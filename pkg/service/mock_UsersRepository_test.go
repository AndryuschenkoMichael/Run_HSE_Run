// Code generated by mockery v2.20.0. DO NOT EDIT.

package service

import (
	model "Run_Hse_Run/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// ChangeProfileImage provides a mock function with given fields: userId, image
func (_m *MockUsersRepository) ChangeProfileImage(userId int, image int) error {
	ret := _m.Called(userId, image)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_ChangeProfileImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeProfileImage'
type MockUsersRepository_ChangeProfileImage_Call struct {
	*mock.Call
}

// ChangeProfileImage is a helper method to define mock.On call
//   - userId int
//   - image int
func (_e *MockUsersRepository_Expecter) ChangeProfileImage(userId interface{}, image interface{}) *MockUsersRepository_ChangeProfileImage_Call {
	return &MockUsersRepository_ChangeProfileImage_Call{Call: _e.mock.On("ChangeProfileImage", userId, image)}
}

func (_c *MockUsersRepository_ChangeProfileImage_Call) Run(run func(userId int, image int)) *MockUsersRepository_ChangeProfileImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockUsersRepository_ChangeProfileImage_Call) Return(_a0 error) *MockUsersRepository_ChangeProfileImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_ChangeProfileImage_Call) RunAndReturn(run func(int, int) error) *MockUsersRepository_ChangeProfileImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: userId
func (_m *MockUsersRepository) GetUserById(userId int) (model.User, error) {
	ret := _m.Called(userId)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) model.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUsersRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - userId int
func (_e *MockUsersRepository_Expecter) GetUserById(userId interface{}) *MockUsersRepository_GetUserById_Call {
	return &MockUsersRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", userId)}
}

func (_c *MockUsersRepository_GetUserById_Call) Run(run func(userId int)) *MockUsersRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUsersRepository_GetUserById_Call) Return(_a0 model.User, _a1 error) *MockUsersRepository_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_GetUserById_Call) RunAndReturn(run func(int) (model.User, error)) *MockUsersRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByNicknamePattern provides a mock function with given fields: nickname
func (_m *MockUsersRepository) GetUsersByNicknamePattern(nickname string) ([]model.User, error) {
	ret := _m.Called(nickname)

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.User, error)); ok {
		return rf(nickname)
	}
	if rf, ok := ret.Get(0).(func(string) []model.User); ok {
		r0 = rf(nickname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nickname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_GetUsersByNicknamePattern_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByNicknamePattern'
type MockUsersRepository_GetUsersByNicknamePattern_Call struct {
	*mock.Call
}

// GetUsersByNicknamePattern is a helper method to define mock.On call
//   - nickname string
func (_e *MockUsersRepository_Expecter) GetUsersByNicknamePattern(nickname interface{}) *MockUsersRepository_GetUsersByNicknamePattern_Call {
	return &MockUsersRepository_GetUsersByNicknamePattern_Call{Call: _e.mock.On("GetUsersByNicknamePattern", nickname)}
}

func (_c *MockUsersRepository_GetUsersByNicknamePattern_Call) Run(run func(nickname string)) *MockUsersRepository_GetUsersByNicknamePattern_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUsersRepository_GetUsersByNicknamePattern_Call) Return(_a0 []model.User, _a1 error) *MockUsersRepository_GetUsersByNicknamePattern_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_GetUsersByNicknamePattern_Call) RunAndReturn(run func(string) ([]model.User, error)) *MockUsersRepository_GetUsersByNicknamePattern_Call {
	_c.Call.Return(run)
	return _c
}

// RenameUser provides a mock function with given fields: userId, nickname
func (_m *MockUsersRepository) RenameUser(userId int, nickname string) error {
	ret := _m.Called(userId, nickname)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userId, nickname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_RenameUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameUser'
type MockUsersRepository_RenameUser_Call struct {
	*mock.Call
}

// RenameUser is a helper method to define mock.On call
//   - userId int
//   - nickname string
func (_e *MockUsersRepository_Expecter) RenameUser(userId interface{}, nickname interface{}) *MockUsersRepository_RenameUser_Call {
	return &MockUsersRepository_RenameUser_Call{Call: _e.mock.On("RenameUser", userId, nickname)}
}

func (_c *MockUsersRepository_RenameUser_Call) Run(run func(userId int, nickname string)) *MockUsersRepository_RenameUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockUsersRepository_RenameUser_Call) Return(_a0 error) *MockUsersRepository_RenameUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_RenameUser_Call) RunAndReturn(run func(int, string) error) *MockUsersRepository_RenameUser_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUsersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUsersRepository(t mockConstructorTestingTNewMockUsersRepository) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
