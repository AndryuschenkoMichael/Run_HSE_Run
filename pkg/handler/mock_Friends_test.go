// Code generated by mockery v2.20.0. DO NOT EDIT.

package handler

import (
	model "Run_Hse_Run/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// MockFriends is an autogenerated mock type for the Friends type
type MockFriends struct {
	mock.Mock
}

type MockFriends_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFriends) EXPECT() *MockFriends_Expecter {
	return &MockFriends_Expecter{mock: &_m.Mock}
}

// AddFriend provides a mock function with given fields: userIdFrom, userIdTo
func (_m *MockFriends) AddFriend(userIdFrom int, userIdTo int) error {
	ret := _m.Called(userIdFrom, userIdTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userIdFrom, userIdTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFriends_AddFriend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFriend'
type MockFriends_AddFriend_Call struct {
	*mock.Call
}

// AddFriend is a helper method to define mock.On call
//   - userIdFrom int
//   - userIdTo int
func (_e *MockFriends_Expecter) AddFriend(userIdFrom interface{}, userIdTo interface{}) *MockFriends_AddFriend_Call {
	return &MockFriends_AddFriend_Call{Call: _e.mock.On("AddFriend", userIdFrom, userIdTo)}
}

func (_c *MockFriends_AddFriend_Call) Run(run func(userIdFrom int, userIdTo int)) *MockFriends_AddFriend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockFriends_AddFriend_Call) Return(_a0 error) *MockFriends_AddFriend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFriends_AddFriend_Call) RunAndReturn(run func(int, int) error) *MockFriends_AddFriend_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFriend provides a mock function with given fields: userIdFrom, userIdTo
func (_m *MockFriends) DeleteFriend(userIdFrom int, userIdTo int) error {
	ret := _m.Called(userIdFrom, userIdTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userIdFrom, userIdTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFriends_DeleteFriend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFriend'
type MockFriends_DeleteFriend_Call struct {
	*mock.Call
}

// DeleteFriend is a helper method to define mock.On call
//   - userIdFrom int
//   - userIdTo int
func (_e *MockFriends_Expecter) DeleteFriend(userIdFrom interface{}, userIdTo interface{}) *MockFriends_DeleteFriend_Call {
	return &MockFriends_DeleteFriend_Call{Call: _e.mock.On("DeleteFriend", userIdFrom, userIdTo)}
}

func (_c *MockFriends_DeleteFriend_Call) Run(run func(userIdFrom int, userIdTo int)) *MockFriends_DeleteFriend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockFriends_DeleteFriend_Call) Return(_a0 error) *MockFriends_DeleteFriend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFriends_DeleteFriend_Call) RunAndReturn(run func(int, int) error) *MockFriends_DeleteFriend_Call {
	_c.Call.Return(run)
	return _c
}

// GetFriends provides a mock function with given fields: userId
func (_m *MockFriends) GetFriends(userId int) ([]model.User, error) {
	ret := _m.Called(userId)

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) []model.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFriends_GetFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFriends'
type MockFriends_GetFriends_Call struct {
	*mock.Call
}

// GetFriends is a helper method to define mock.On call
//   - userId int
func (_e *MockFriends_Expecter) GetFriends(userId interface{}) *MockFriends_GetFriends_Call {
	return &MockFriends_GetFriends_Call{Call: _e.mock.On("GetFriends", userId)}
}

func (_c *MockFriends_GetFriends_Call) Run(run func(userId int)) *MockFriends_GetFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockFriends_GetFriends_Call) Return(_a0 []model.User, _a1 error) *MockFriends_GetFriends_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFriends_GetFriends_Call) RunAndReturn(run func(int) ([]model.User, error)) *MockFriends_GetFriends_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockFriends interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFriends creates a new instance of MockFriends. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFriends(t mockConstructorTestingTNewMockFriends) *MockFriends {
	mock := &MockFriends{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
