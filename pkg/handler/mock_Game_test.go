// Code generated by mockery v2.20.0. DO NOT EDIT.

package handler

import (
	model "Run_Hse_Run/pkg/model"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockGame is an autogenerated mock type for the Game type
type MockGame struct {
	mock.Mock
}

type MockGame_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGame) EXPECT() *MockGame_Expecter {
	return &MockGame_Expecter{mock: &_m.Mock}
}

// AddCall provides a mock function with given fields: userIdFirst, userIdSecond, roomIdFirst
func (_m *MockGame) AddCall(userIdFirst int, userIdSecond int, roomIdFirst int) (model.Game, error) {
	ret := _m.Called(userIdFirst, userIdSecond, roomIdFirst)

	var r0 model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) (model.Game, error)); ok {
		return rf(userIdFirst, userIdSecond, roomIdFirst)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) model.Game); ok {
		r0 = rf(userIdFirst, userIdSecond, roomIdFirst)
	} else {
		r0 = ret.Get(0).(model.Game)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(userIdFirst, userIdSecond, roomIdFirst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGame_AddCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCall'
type MockGame_AddCall_Call struct {
	*mock.Call
}

// AddCall is a helper method to define mock.On call
//   - userIdFirst int
//   - userIdSecond int
//   - roomIdFirst int
func (_e *MockGame_Expecter) AddCall(userIdFirst interface{}, userIdSecond interface{}, roomIdFirst interface{}) *MockGame_AddCall_Call {
	return &MockGame_AddCall_Call{Call: _e.mock.On("AddCall", userIdFirst, userIdSecond, roomIdFirst)}
}

func (_c *MockGame_AddCall_Call) Run(run func(userIdFirst int, userIdSecond int, roomIdFirst int)) *MockGame_AddCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockGame_AddCall_Call) Return(_a0 model.Game, _a1 error) *MockGame_AddCall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGame_AddCall_Call) RunAndReturn(run func(int, int, int) (model.Game, error)) *MockGame_AddCall_Call {
	_c.Call.Return(run)
	return _c
}

// AddUser provides a mock function with given fields: userId, roomId
func (_m *MockGame) AddUser(userId int, roomId int) {
	_m.Called(userId, roomId)
}

// MockGame_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type MockGame_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - userId int
//   - roomId int
func (_e *MockGame_Expecter) AddUser(userId interface{}, roomId interface{}) *MockGame_AddUser_Call {
	return &MockGame_AddUser_Call{Call: _e.mock.On("AddUser", userId, roomId)}
}

func (_c *MockGame_AddUser_Call) Run(run func(userId int, roomId int)) *MockGame_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockGame_AddUser_Call) Return() *MockGame_AddUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGame_AddUser_Call) RunAndReturn(run func(int, int)) *MockGame_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// Cancel provides a mock function with given fields: userId
func (_m *MockGame) Cancel(userId int) {
	_m.Called(userId)
}

// MockGame_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockGame_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - userId int
func (_e *MockGame_Expecter) Cancel(userId interface{}) *MockGame_Cancel_Call {
	return &MockGame_Cancel_Call{Call: _e.mock.On("Cancel", userId)}
}

func (_c *MockGame_Cancel_Call) Run(run func(userId int)) *MockGame_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockGame_Cancel_Call) Return() *MockGame_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGame_Cancel_Call) RunAndReturn(run func(int)) *MockGame_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCall provides a mock function with given fields: userIdFirst, userIdSecond
func (_m *MockGame) DeleteCall(userIdFirst int, userIdSecond int) error {
	ret := _m.Called(userIdFirst, userIdSecond)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userIdFirst, userIdSecond)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGame_DeleteCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCall'
type MockGame_DeleteCall_Call struct {
	*mock.Call
}

// DeleteCall is a helper method to define mock.On call
//   - userIdFirst int
//   - userIdSecond int
func (_e *MockGame_Expecter) DeleteCall(userIdFirst interface{}, userIdSecond interface{}) *MockGame_DeleteCall_Call {
	return &MockGame_DeleteCall_Call{Call: _e.mock.On("DeleteCall", userIdFirst, userIdSecond)}
}

func (_c *MockGame_DeleteCall_Call) Run(run func(userIdFirst int, userIdSecond int)) *MockGame_DeleteCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockGame_DeleteCall_Call) Return(_a0 error) *MockGame_DeleteCall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGame_DeleteCall_Call) RunAndReturn(run func(int, int) error) *MockGame_DeleteCall_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomByCodePattern provides a mock function with given fields: code, campusId
func (_m *MockGame) GetRoomByCodePattern(code string, campusId int) ([]model.Room, error) {
	ret := _m.Called(code, campusId)

	var r0 []model.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]model.Room, error)); ok {
		return rf(code, campusId)
	}
	if rf, ok := ret.Get(0).(func(string, int) []model.Room); ok {
		r0 = rf(code, campusId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(code, campusId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGame_GetRoomByCodePattern_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomByCodePattern'
type MockGame_GetRoomByCodePattern_Call struct {
	*mock.Call
}

// GetRoomByCodePattern is a helper method to define mock.On call
//   - code string
//   - campusId int
func (_e *MockGame_Expecter) GetRoomByCodePattern(code interface{}, campusId interface{}) *MockGame_GetRoomByCodePattern_Call {
	return &MockGame_GetRoomByCodePattern_Call{Call: _e.mock.On("GetRoomByCodePattern", code, campusId)}
}

func (_c *MockGame_GetRoomByCodePattern_Call) Run(run func(code string, campusId int)) *MockGame_GetRoomByCodePattern_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockGame_GetRoomByCodePattern_Call) Return(_a0 []model.Room, _a1 error) *MockGame_GetRoomByCodePattern_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGame_GetRoomByCodePattern_Call) RunAndReturn(run func(string, int) ([]model.Room, error)) *MockGame_GetRoomByCodePattern_Call {
	_c.Call.Return(run)
	return _c
}

// SendGame provides a mock function with given fields: game
func (_m *MockGame) SendGame(game model.Game) error {
	ret := _m.Called(game)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Game) error); ok {
		r0 = rf(game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGame_SendGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGame'
type MockGame_SendGame_Call struct {
	*mock.Call
}

// SendGame is a helper method to define mock.On call
//   - game model.Game
func (_e *MockGame_Expecter) SendGame(game interface{}) *MockGame_SendGame_Call {
	return &MockGame_SendGame_Call{Call: _e.mock.On("SendGame", game)}
}

func (_c *MockGame_SendGame_Call) Run(run func(game model.Game)) *MockGame_SendGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Game))
	})
	return _c
}

func (_c *MockGame_SendGame_Call) Return(_a0 error) *MockGame_SendGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGame_SendGame_Call) RunAndReturn(run func(model.Game) error) *MockGame_SendGame_Call {
	_c.Call.Return(run)
	return _c
}

// SendResult provides a mock function with given fields: gameId, userId, time
func (_m *MockGame) SendResult(gameId int, userId int, time int) {
	_m.Called(gameId, userId, time)
}

// MockGame_SendResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResult'
type MockGame_SendResult_Call struct {
	*mock.Call
}

// SendResult is a helper method to define mock.On call
//   - gameId int
//   - userId int
//   - time int
func (_e *MockGame_Expecter) SendResult(gameId interface{}, userId interface{}, time interface{}) *MockGame_SendResult_Call {
	return &MockGame_SendResult_Call{Call: _e.mock.On("SendResult", gameId, userId, time)}
}

func (_c *MockGame_SendResult_Call) Run(run func(gameId int, userId int, time int)) *MockGame_SendResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockGame_SendResult_Call) Return() *MockGame_SendResult_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGame_SendResult_Call) RunAndReturn(run func(int, int, int)) *MockGame_SendResult_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTime provides a mock function with given fields: gameId, userId, time
func (_m *MockGame) UpdateTime(gameId int, userId int, time int) error {
	ret := _m.Called(gameId, userId, time)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(gameId, userId, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGame_UpdateTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTime'
type MockGame_UpdateTime_Call struct {
	*mock.Call
}

// UpdateTime is a helper method to define mock.On call
//   - gameId int
//   - userId int
//   - time int
func (_e *MockGame_Expecter) UpdateTime(gameId interface{}, userId interface{}, time interface{}) *MockGame_UpdateTime_Call {
	return &MockGame_UpdateTime_Call{Call: _e.mock.On("UpdateTime", gameId, userId, time)}
}

func (_c *MockGame_UpdateTime_Call) Run(run func(gameId int, userId int, time int)) *MockGame_UpdateTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockGame_UpdateTime_Call) Return(_a0 error) *MockGame_UpdateTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGame_UpdateTime_Call) RunAndReturn(run func(int, int, int) error) *MockGame_UpdateTime_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeConnection provides a mock function with given fields: w, r
func (_m *MockGame) UpgradeConnection(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// MockGame_UpgradeConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeConnection'
type MockGame_UpgradeConnection_Call struct {
	*mock.Call
}

// UpgradeConnection is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockGame_Expecter) UpgradeConnection(w interface{}, r interface{}) *MockGame_UpgradeConnection_Call {
	return &MockGame_UpgradeConnection_Call{Call: _e.mock.On("UpgradeConnection", w, r)}
}

func (_c *MockGame_UpgradeConnection_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockGame_UpgradeConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockGame_UpgradeConnection_Call) Return() *MockGame_UpgradeConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGame_UpgradeConnection_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockGame_UpgradeConnection_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockGame interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGame creates a new instance of MockGame. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGame(t mockConstructorTestingTNewMockGame) *MockGame {
	mock := &MockGame{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
